#!/usr/bin/python

import sys , subprocess
"""
2r - 'recursive'
actually just interprets wildcard * as 1 to star_lim characters
in a crude away which makes multiple *s pretty messy
Note also that the expanding of *s interferes with the intersecting of ?s
so for all practical purposes the features are incompatible.
Version 2 - many improvements...
  - using subprocess module for system calls (grep)
  - more structure
  - (coming soon) single-collision crossword checking
"""
matchesPending = [] ; collisions = []
debug = 0
fileRoot = "words-len-"
lenLimit = 19
star_lim = lenLimit - 1
double_wild = False

def main( * args ):
  if debug >= 3 : print args
  L = list( args[ 1 : ] )
  expandStars( L )
  if debug >= 3 : print L
  lists = [ doGrep( * l ) for l in enumerate( L ) ]
  if debug > 1 : print collisions
  if debug > 2 : print lists
  if double_wild:
    print "double_wild"
    # compact results by grouping same-length result-lists
    lists = [ sum( [ l for l in lists if l and len( l[ 0 ] ) == i \
		  ] , [ ] ) for i in range( lenLimit ) ]
  else:
    # only bother interpreting ?s if list collapsing has not been done
    redoCollisions( lists )
  print lists

def redoCollisions( lists ):
  changed = set() ; done = False
  while not done:
    for coll in collisions:
      if coll[ 1 ]:
	if debug > 2: print coll
	# Set of possibilities has been restricted
	coll[ 1 ] = False # Although it may become true again before we are done
	allowed = set( coll[ 0 ] ) # duplicate set - unnecessary at this stage
	for ( n , i ) in ( coll[ 2 : 4 ] , coll[ 4 : 6 ] ):
	  lst = lists[ n ]
	  newList = [ w for w in lst if w[ i ] in allowed ]
	  if not newList:
	    # Contradiction reached - wipe everything and return
	    lists[:] = [[] for l in lists]
	    return
	  if len( newList ) < len( lst ):
	    # update list and flag as changed
	    changed.add( n )
	    lists[ n ] = newList
	    # Check if other collisions involved with this list
	    for coll1 in collisions:
	      if not coll1 is coll:
		i1 = -1
		if n == coll1[ 2 ]:  i1 = coll1[ 3 ]
		if n == coll1[ 4 ]:  i1 = coll1[ 5 ]
		if i1 > -1:
		  # make a new list
		  allowed1 = coll1[ 0 ]
		  newAllowed = set( [ w[ i1 ] for w in newList ] )
		  newAllowed = allowed1.intersection( newAllowed )
		  # update and flag if changed
		  if len( newAllowed ) < len( allowed1 ):
		    coll1[ 0 ] = newAllowed
		    coll1[ 1 ] = True
    if changed:
      if debug>2: print changed
      changed = set()
    else: done = True
	
def expFromSet( s ): return '[' + ''.join( list( s ) ) + ']'

def expandStars( L ):
  """in place expansion of '*' to '.'s"""
  # Manual enumeration because we'll be changing L as we go
  global double_wild
  p = 0
  while p < len( L ):
    w = L[ p ]
    if '*' in w:
      i = w.index( '*' )
      w0 , w1  =  w[ : i ] , w[ i+1 : ]
      if '*' in w0 or '*' in w1:
	# Flag double wildcard which will trigger list collapsing
	double_wild = True
      L[ p : p + 1 ] = [ ( w0 + ( j * '.' ) + w1 ) for j in range( star_lim ) ]
    else:
      # For proper recursion only increment pointer when we didn't expand a * 
      p += 1

def doGrep( n , w ):
  global collisions,matchesPending
  exp = ""
  cmd = [ "grep" , "-E" ]
  i = 0 ; inBrack = False ; matchSpots = [] ; matchedSpots = []
  words = []
  for c in w:
    if inBrack:
      # Currently in []s - copy content without adding to character count
      exp += c
      if c == ']':
	inBrack = False
	# We only count the character if and when the []s get closed
	i += 1
    else:
      if c == '.':
	c = '[A-Za-z]'
      if c == '?':
	if matchesPending:
	  # This spot has to match previous output
	  coll = matchesPending.pop( 0 )
	  # Get restriction already dictated by earlier search
	  c = expFromSet( coll[ 0 ] )
	  # complete collision information with pointer to this list and spot
	  coll += [ n , i ]
	  matchedSpots.append( coll )
	else:
	  # This spot will be monitored in output for future match
	  c = '[A-Za-z]'
	  matchSpots.append( i )
      # We just copy other content as is
      exp += c
      if c == '[':
	inBrack = True
      else:
	# but only count actual characters
	i += 1
  if i==0 or i>lenLimit: return
  cmd += [ exp , fileRoot + str(i) ]
  if debug > 1: print cmd ; print matchSpots
  
  try:  outp = subprocess.check_output( cmd )
  except: outp = ""
  
  words += outp.split()
  
  for spot in matchSpots:
    allowed = set( [ w[spot] for w in words ] )
    # register new collision
    newCollision = [ allowed , False , n , spot ]
    collisions.append( newCollision )
    matchesPending.append( newCollision )
  if debug > 2: print matchesPending
  for spot in matchedSpots:
    allowed = set( [ w[ spot[ 5 ] ] for w in words ] )
    if debug > 2: print allowed
    # update collision info
    if len( allowed ) < len( spot[ 0 ] ):
      spot[ 0 ] = spot[ 0 ].intersection( allowed )
      spot[ 1 ] = True	# mark as changed
  
  return words

if __name__ == "__main__":
    main(*sys.argv)